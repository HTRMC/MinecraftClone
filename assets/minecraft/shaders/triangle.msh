#version 450
#extension GL_EXT_mesh_shader : require

layout(binding = 0) uniform UniformBufferObject {
    mat4 model;
    mat4 view;
    mat4 proj;
} ubo;

struct Vertex {
    vec3 pos;
    vec3 color;
    vec2 texCoord;
};

const Vertex vertices[24] = Vertex[24](
    // Front face (z = 0.5)
    Vertex(vec3(-0.5, -0.5,  0.5), vec3(1.0, 0.0, 0.0), vec2(0.0, 0.0)),
    Vertex(vec3( 0.5, -0.5,  0.5), vec3(1.0, 0.0, 0.0), vec2(1.0, 0.0)),
    Vertex(vec3( 0.5,  0.5,  0.5), vec3(1.0, 0.0, 0.0), vec2(1.0, 1.0)),
    Vertex(vec3(-0.5,  0.5,  0.5), vec3(1.0, 0.0, 0.0), vec2(0.0, 1.0)),

    // Back face (z = -0.5)
    Vertex(vec3( 0.5, -0.5, -0.5), vec3(0.0, 1.0, 0.0), vec2(0.0, 0.0)),
    Vertex(vec3(-0.5, -0.5, -0.5), vec3(0.0, 1.0, 0.0), vec2(1.0, 0.0)),
    Vertex(vec3(-0.5,  0.5, -0.5), vec3(0.0, 1.0, 0.0), vec2(1.0, 1.0)),
    Vertex(vec3( 0.5,  0.5, -0.5), vec3(0.0, 1.0, 0.0), vec2(0.0, 1.0)),

    // Top face (y = 0.5)
    Vertex(vec3(-0.5,  0.5,  0.5), vec3(0.0, 0.0, 1.0), vec2(0.0, 0.0)),
    Vertex(vec3( 0.5,  0.5,  0.5), vec3(0.0, 0.0, 1.0), vec2(1.0, 0.0)),
    Vertex(vec3( 0.5,  0.5, -0.5), vec3(0.0, 0.0, 1.0), vec2(1.0, 1.0)),
    Vertex(vec3(-0.5,  0.5, -0.5), vec3(0.0, 0.0, 1.0), vec2(0.0, 1.0)),

    // Bottom face (y = -0.5)
    Vertex(vec3(-0.5, -0.5, -0.5), vec3(1.0, 1.0, 0.0), vec2(0.0, 0.0)),
    Vertex(vec3( 0.5, -0.5, -0.5), vec3(1.0, 1.0, 0.0), vec2(1.0, 0.0)),
    Vertex(vec3( 0.5, -0.5,  0.5), vec3(1.0, 1.0, 0.0), vec2(1.0, 1.0)),
    Vertex(vec3(-0.5, -0.5,  0.5), vec3(1.0, 1.0, 0.0), vec2(0.0, 1.0)),

    // Right face (x = 0.5)
    Vertex(vec3( 0.5, -0.5,  0.5), vec3(1.0, 0.0, 1.0), vec2(0.0, 0.0)),
    Vertex(vec3( 0.5, -0.5, -0.5), vec3(1.0, 0.0, 1.0), vec2(1.0, 0.0)),
    Vertex(vec3( 0.5,  0.5, -0.5), vec3(1.0, 0.0, 1.0), vec2(1.0, 1.0)),
    Vertex(vec3( 0.5,  0.5,  0.5), vec3(1.0, 0.0, 1.0), vec2(0.0, 1.0)),

    // Left face (x = -0.5)
    Vertex(vec3(-0.5, -0.5, -0.5), vec3(0.0, 1.0, 1.0), vec2(0.0, 0.0)),
    Vertex(vec3(-0.5, -0.5,  0.5), vec3(0.0, 1.0, 1.0), vec2(1.0, 0.0)),
    Vertex(vec3(-0.5,  0.5,  0.5), vec3(0.0, 1.0, 1.0), vec2(1.0, 1.0)),
    Vertex(vec3(-0.5,  0.5, -0.5), vec3(0.0, 1.0, 1.0), vec2(0.0, 1.0))
);

const uint triIndices[36] = uint[36](
    0, 1, 2, 2, 3, 0,       // Front
    4, 5, 6, 6, 7, 4,       // Back
    8, 9, 10, 10, 11, 8,    // Top
    12, 13, 14, 14, 15, 12, // Bottom
    16, 17, 18, 18, 19, 16, // Right
    20, 21, 22, 22, 23, 20  // Left
);

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 24, max_primitives = 12) out;

layout(location = 0) out vec3 fragColor[];
layout(location = 1) out vec2 fragTexCoord[];

void main() {
    SetMeshOutputsEXT(24, 12);

    for (uint i = 0; i < 24; ++i) {
        gl_MeshVerticesEXT[i].gl_Position = ubo.proj * ubo.view * ubo.model * vec4(vertices[i].pos, 1.0);
        fragColor[i] = vertices[i].color;
        fragTexCoord[i] = vertices[i].texCoord;
    }

    for (uint i = 0; i < 12; ++i) {
        gl_PrimitiveTriangleIndicesEXT[i] = uvec3(triIndices[i*3], triIndices[i*3+1], triIndices[i*3+2]);
    }
}